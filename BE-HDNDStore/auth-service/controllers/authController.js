import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User.js";
import { OAuth2Client } from "google-auth-library";
import mongoose from "mongoose";
import otpGenerator from "otp-generator";
import nodemailer from "nodemailer";
import sendOtpEmail from "../services/emailService.js";
import cloudinary from "../config/cloudinaryConfig.js";
import streamifier from "streamifier";

// Kh·ªüi t·∫°o client Google OAuth
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

{
  /* Register */
}
export const register = async (req, res) => {
  try {
    const { email, phone, password, role } = req.body;

    // Ki·ªÉm tra n·∫øu user ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ phone });
    if (existingUser) {
      return res.status(400).json({ error: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o user v·ªõi c√°c tr∆∞·ªùng m·∫∑c ƒë·ªãnh
    const newUser = new User({
      phone,
      password: hashedPassword,
      email: email,
      fullName: "",
      gender: "other",
      birthday: { day: "", month: "", year: "" },
      address: { city: "", district: "", ward: "", street: "" },
      avatar: "",
      role,
    });

    await newUser.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};
{
  /* Login */
}
export const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user)
      return res.status(400).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res.status(400).json({ error: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });

    const token = jwt.sign(
      { id: user._id, role: user.role }, // üõë L∆∞u role v√†o token
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({ token, user });
  } catch (error) {
    res.status(500).json({ error: "L·ªói server" });
  }
};

{
  /* Get User Profile */
}
export const getUserProfile = async (req, res) => {
  try {
    console.log("Getting user profile for ID:", req.user.id);
    const user = await User.findById(req.user.id).select("-password"); // Lo·∫°i b·ªè password
    if (!user)
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    console.log("User avatar from DB:", user.avatar);
    
    // Ensure avatar is included in the response
    res.json({
      _id: user._id,
      email: user.email,
      phone: user.phone,
      fullName: user.fullName,
      gender: user.gender,
      birthday: user.birthday,
      address: user.address,
      role: user.role,
      avatar: user.avatar,
      provider: user.provider,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin user:", error);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
  }
};

{
  /* Update Profile */
}

export const updateUserProfile = async (req, res) => {
  try {
    const { fullName, phone, gender, birthday, address, avatar } = req.body;

    // C·∫≠p nh·∫≠t th√¥ng tin
    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      { fullName, phone, gender, birthday, address, avatar },
      { new: true, runValidators: true }
    ).select("-password");

    res.json(updatedUser);
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆°:", error);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
  }
};

{
  /* Update Password */
}

export const changePassword = async (req, res) => {
  try {
    const userId = req.user.id; // L·∫•y userId t·ª´ token (Middleware)
    const { currentPassword, newPassword } = req.body;

    // Ki·ªÉm tra xem user c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res
        .status(400)
        .json({ error: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c!" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi v√† c·∫≠p nh·∫≠t v√†o DB
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    return res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
    return res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};

{
  /* Upload Image */
}
export const updateAvatar = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n!" });
    }

    const userId = req.user.id;
    console.log("‚≠ê Updating avatar for user ID:", userId);
    
    // Upload ·∫£nh l√™n Cloudinary
    let uploadResult;
    try {
      uploadResult = await new Promise((resolve, reject) => {
        const uploadStream = cloudinary.uploader.upload_stream(
          { folder: "avatars" },
          (error, result) => {
            if (error) {
              console.error("‚ùå L·ªói upload Cloudinary:", error);
              return reject(error);
            }
            console.log("‚úÖ Cloudinary upload success, secure_url:", result.secure_url);
            resolve(result);
          }
        );
        
        streamifier.createReadStream(req.file.buffer).pipe(uploadStream);
      });
    } catch (cloudinaryError) {
      console.error("‚ùå L·ªói khi upload l√™n Cloudinary:", cloudinaryError);
      return res.status(500).json({ error: "L·ªói khi upload ·∫£nh l√™n Cloudinary!" });
    }

    // L∆∞u URL Cloudinary v√†o DB
    try {
      const updateResult = await User.findByIdAndUpdate(
        userId, 
        { avatar: uploadResult.secure_url },
        { new: true } // Tr·∫£ v·ªÅ document ƒë√£ c·∫≠p nh·∫≠t
      );
      
      if (!updateResult) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y user ƒë·ªÉ c·∫≠p nh·∫≠t avatar:", userId);
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
      }
      
      console.log("‚úÖ DB update success, saved avatar:", updateResult.avatar);
      
      return res
        .status(200)
        .json({ message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!", avatar: uploadResult.secure_url });
    } catch (dbError) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t avatar v√†o database:", dbError);
      return res.status(500).json({ error: "L·ªói khi l∆∞u avatar v√†o database!" });
    }
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t avatar:", error);
    return res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};

{
  /* Login with google */
}
export const googleLogin = async (req, res) => {
  try {
    const { token } = req.body;
    if (!token) return res.status(400).json({ error: "Token kh√¥ng h·ª£p l·ªá!" });

    {
      /* token */
    }

    console.log("Received Token from FE:", token);

    {
      /*Verify ID Token v·ªõi Google*/
    }
    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    {
      /*Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ Google*/
    }
    console.log("Decoded Google Payload:", payload);

    const { email, name, picture } = payload;

    // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i ch∆∞a
    let user = await User.findOne({ email });
    if (!user) {
      user = new User({
        email,
        fullName: name,
        avatar: picture,
        password: "",
        role: "user",
      });
      await user.save();
    }

    // T·∫°o JWT token
    const accessToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    res.json({ token: accessToken, user });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p Google:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};
{
  /*Get access tu product
  H√†m t√¨m user theo ID*/
}

const findUserById = async (userId) => {
  return await User.findById(new mongoose.Types.ObjectId(userId));
};

// API l·∫•y th√¥ng tin user theo ID
export const getUserById = async (req, res) => {
  try {
    const { userId } = req.params;

    // Ki·ªÉm tra userId c√≥ h·ª£p l·ªá kh√¥ng
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: "User ID kh√¥ng h·ª£p l·ªá!" });
    }

    // Chuy·ªÉn th√†nh ObjectId
    const user = await findUserById(new mongoose.Types.ObjectId(userId));

    if (!user) {
      return res.status(404).json({ error: "User kh√¥ng t·ªìn t·∫°i!" });
    }

    // Tr·∫£ v·ªÅ th√¥ng tin user (·∫©n m·∫≠t kh·∫©u)
    res.status(200).json({
      userId: user._id,
      email: user.email,
      phone: user.phone,
      fullName: user.fullName,
      gender: user.gender,
      birthday: user.birthday,
      address: user.address,
      avatar: user.avatar,
    });
  } catch (error) {
    console.error("L·ªói l·∫•y user:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};

{/*Update user by ID*/}



export const updateUserById = async (req, res) => {
  try {
    const { userId } = req.params;
    const { fullName, phone, address, avatar } = req.body;

    // Ki·ªÉm tra userId h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: "User ID kh√¥ng h·ª£p l·ªá!" });
    }
    // Ki·ªÉm tra address v√† √©p ki·ªÉu street th√†nh string n·∫øu c·∫ßn
    if (address && typeof address.street === "object") {
      address.street = String(address.street.street || ""); // L·∫•y gi√° tr·ªã h·ª£p l·ªá
    }

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!fullName || !phone || !address) {
      return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    console.log("D·ªØ li·ªáu c·∫≠p nh·∫≠t:", { fullName, phone, address, avatar });

    // T√¨m v√† c·∫≠p nh·∫≠t user
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { fullName, phone, address, avatar },
      { new: true, runValidators: true } // runValidators gi√∫p ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    );

    if (!updatedUser) {
      return res.status(404).json({ error: "User kh√¥ng t·ªìn t·∫°i!" });
    }

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
      user: {
        userId: updatedUser._id,
        email: updatedUser.email,
        phone: updatedUser.phone,
        fullName: updatedUser.fullName,
        gender: updatedUser.gender,
        birthday: updatedUser.birthday,
        address: updatedUser.address,
        avatar: updatedUser.avatar,
      },
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t user:", error.message); // In l·ªói chi ti·∫øt
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau!" });
  }
};


{/* send otp */}
export const sendOTP = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(400).json({ error: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // T·∫°o m√£ OTP
    const otp = otpGenerator.generate(6, { digits: true, upperCase: false, specialChars: false });
    const otpExpiry = Date.now() + 5 * 60 * 1000; // H·∫øt h·∫°n sau 5 ph√∫t

    // L∆∞u OTP v√†o database
    user.otp = otp;
    user.otpExpiry = otpExpiry;
    await user.save();
    const name = user.fullName

    // G·ª≠i OTP qua email sang template 
    await sendOtpEmail(email, name, otp);

    res.status(200).json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email!" });
  } catch (error) {
    console.error("L·ªói g·ª≠i OTP:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};

{/* verify otp */}
export const verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: "Email kh√¥ng t·ªìn t·∫°i!" });

    // Ki·ªÉm tra OTP
    if (user.otp !== otp || Date.now() > user.otpExpiry) {
      return res.status(400).json({ error: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    // OTP h·ª£p l·ªá ‚Üí Cho ph√©p ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    user.isOtpVerified = true;
    user.otp = null; // X√≥a OTP sau khi x√°c minh
    user.otpExpiry = null;
    await user.save();

    res.status(200).json({ message: "OTP h·ª£p l·ªá, ti·∫øp t·ª•c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
  } catch (error) {
    console.error("L·ªói x√°c th·ª±c OTP:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};


{/* reset password sau khi nhap ma otp */}
export const resetPassword = async (req, res) => {
  try {
    const { email, newPassword } = req.body;
    // Ki·ªÉm tra email v√† OTP h·ª£p l·ªá
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};

{
  /* Send Verification Email */
}
export const sendVerificationEmail = async (req, res) => {
  try {
    const { email, verificationCode } = req.body;
    
    if (!email || !verificationCode) {
      return res.status(400).json({ error: "Email v√† m√£ x√°c th·ª±c l√† b·∫Øt bu·ªôc!" });
    }
    
    // S·ª≠ d·ª•ng email service ƒë·ªÉ g·ª≠i email x√°c th·ª±c
    const name = "Ng∆∞·ªùi d√πng m·ªõi"
    await sendOtpEmail(
      email, 
      name, // Temporary name since the user is not registered yet
      verificationCode,
      false // This is not a password reset, it's a verification email
    );
    
    res.status(200).json({ 
      success: true, 
      message: "Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!" 
    });
  } catch (error) {
    console.error("L·ªói g·ª≠i email x√°c th·ª±c:", error);
    res.status(500).json({ error: "L·ªói khi g·ª≠i email x√°c th·ª±c, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};
