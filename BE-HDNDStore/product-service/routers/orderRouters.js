const express = require("express");
const mongoose = require("mongoose");
const router = express.Router();
const Order = require("../model/Order");
const User = require("../model/User");
const Product = require("../model/Product");
const app = express();

//Mail 
const PDFDocument = require("pdfkit");
const fs = require("fs");
const path = require("path");
const nodemailer = require("nodemailer");
const { jsPDF } = require("jspdf");
const autoTable = require("jspdf-autotable").default; 
const RobotoFont = require("../config/roboto");

// Th√™m middleware x·ª≠ l√Ω JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// H√†m ki·ªÉm tra user t·ª´ API
const fetchUserById = async (userId) => {
    try {
        const response = await fetch(`http://localhost:5001/api/users/${userId}`);
        const text = await response.text();
        const data = JSON.parse(text);
        return data;
    } catch (error) {
        console.error("L·ªói khi fetch user:", error);
        return null;
    }
};


// API ƒê·∫∑t h√†ng
router.post("/dat-hang", async (req, res) => {
    try {
        let { receiver, cartItems, shippingAddress, discount } = req.body;

        // Ki·ªÉm tra ID ng∆∞·ªùi nh·∫≠n h·ª£p l·ªá
        if (!receiver || !mongoose.Types.ObjectId.isValid(receiver)) {
            return res.status(400).json({ message: "ID ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá!" });
        }
        receiver = new mongoose.Types.ObjectId(receiver);

        // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n c√≥ t·ªìn t·∫°i kh√¥ng
        // const userExists = await fetchUserById(String(receiver));
        // if (!userExists) {
        //     return res.status(404).json({ message: "Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i!" });
        // }

        // Ki·ªÉm tra gi·ªè h√†ng tr·ªëng
        if (!cartItems || cartItems.length === 0) {
            return res.status(400).json({ message: "Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ ƒë·∫∑t h√†ng!" });
        }


        // Ki·ªÉm tra xem c√≥ `shippingAddress` kh√¥ng
        if (!shippingAddress || typeof shippingAddress !== "object") {
            return res.status(400).json({ message: "ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng h·ª£p l·ªá!" });
        }

        // Gi·∫£i c·∫•u tr√∫c `shippingAddress`
        const { fullName, phone, address } = shippingAddress;

        // Ki·ªÉm tra `fullName` v√† `phone`
        if (!fullName || typeof fullName !== "string" || !phone || typeof phone !== "string") {
            return res.status(400).json({ message: "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng h·ªç t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i!" });
        }

        // Ki·ªÉm tra `address`
        if (!address || typeof address !== "object") {
            return res.status(400).json({ message: "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá!" });
        }

        const { street, city, district, ward } = address;

        // Ki·ªÉm tra t·ª´ng ph·∫ßn c·ªßa `address`
        if (!street || !city || !district || !ward) {
            return res.status(400).json({
                message: "Thi·∫øu th√¥ng tin ƒë·ªãa ch·ªâ giao h√†ng!",
                missingFields: { street, city, district, ward }
            });
        }

        // console.log("‚úÖ ƒê·ªãa ch·ªâ giao h√†ng h·ª£p l·ªá:", JSON.stringify(shippingAddress, null, 2));



        // Ki·ªÉm tra h√†ng t·ªìn kho
        for (const item of cartItems) {
            console.log(` Ki·ªÉm tra s·∫£n ph·∫©m: ${item.name}`);

            const product = await Product.findById(item._id);
            if (!product) {
                return res.status(404).json({ message: `S·∫£n ph·∫©m ${item.name} kh√¥ng t·ªìn t·∫°i!` });
            }

            // console.log("üìå Bi·∫øn th·ªÉ trong DB:", JSON.stringify(product.variants, null, 2));

            // T√¨m t·∫•t c·∫£ bi·∫øn th·ªÉ c√≥ m√†u & size t·ª´ gi·ªè h√†ng
            const selectedVariants = item.variants.filter(v => v.color && v.size);

            if (selectedVariants.length === 0) {
                return res.status(400).json({
                    message: `Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph√π h·ª£p trong gi·ªè h√†ng cho ${item.name}!`
                });
            }

            // L·∫∑p qua t·∫•t c·∫£ bi·∫øn th·ªÉ ƒë√£ ch·ªçn ƒë·ªÉ ki·ªÉm tra t·ªìn kho
            for (const selectedVariant of selectedVariants) {
                const normalizedColor = String(selectedVariant.color).trim().toLowerCase();
                const normalizedSize = String(selectedVariant.size).trim();

                // console.log(`üîç Ki·ªÉm tra bi·∫øn th·ªÉ: M√†u ${normalizedColor}, Size ${normalizedSize}`);

                // T√¨m bi·∫øn th·ªÉ t∆∞∆°ng ·ª©ng trong DB
                const variant = product.variants.find(v =>
                    String(v.color).trim().toLowerCase() === normalizedColor &&
                    String(v.size).trim() === normalizedSize
                );

                if (!variant) {
                    return res.status(400).json({
                        message: `Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ c·ªßa ${item.name} (M√†u: ${selectedVariant.color}, Size: ${selectedVariant.size})!`
                    });
                }

                console.log(`‚úÖ T√¨m th·∫•y bi·∫øn th·ªÉ: M√†u ${variant.color}, Size ${variant.size}, Stock: ${variant.stock}`);

                if (variant.stock < item.quantity) {
                    return res.status(400).json({
                        message: `S·∫£n ph·∫©m ${item.name} (${selectedVariant.color}, ${selectedVariant.size}) ch·ªâ c√≤n ${variant.stock} s·∫£n ph·∫©m!`
                    });
                }
            }
        }



        // T√≠nh t·ªïng ti·ªÅn s·∫£n ph·∫©m
        const totalProductPrice = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);

        // T·ªïng ti·ªÅn ƒë∆°n h√†ng = t·ªïng ti·ªÅn s·∫£n ph·∫©m + 20k ph√≠ ship
        const totalAmount = totalProductPrice + 20000;

        // L·∫•y h√≥a ƒë∆°n m·ªõi nh·∫•t
        const latestOrder = await Order.findOne({}, {}, { sort: { createdAt: -1 } });
        let newInvoiceNumber = latestOrder && latestOrder.idHoaDon
            ? `HD${(parseInt(latestOrder.idHoaDon.replace("HD", ""), 10) + 1).toString().padStart(3, "0")}`
            : "HD001";

        // Nh√≥m s·∫£n ph·∫©m theo `_id`, gi·ªØ nguy√™n c√°c bi·∫øn th·ªÉ `color + size`
        const groupedCartItems = Object.values(
            cartItems.reduce((acc, item) => {
                const key = item._id;

                if (!acc[key]) {
                    // Ki·ªÉm tra v√† g√°n rating n·∫øu rating > 5 th√¨ g√°n l√† 5
                    const validRating = item.rating > 5 ? 5 : item.rating;
                    acc[key] = {
                        _id: item._id,
                        name: item.name,
                        price: item.price,
                        quantity: item.quantity, // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ªïng
                        image: Array.isArray(item.image) ? item.image : [],
                        category: item.category,
                        description: item.description,
                        subcategories: Array.isArray(item.subcategories) ? item.subcategories : [],
                        rating: validRating, // G√°n rating ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra
                        imagethum: Array.isArray(item.imagethum) ? item.imagethum : [],
                        variants: []
                    };
                }
             
                acc[key].quantity += item.quantity; // C·ªông d·ªìn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m

                // Ki·ªÉm tra bi·∫øn th·ªÉ
                item.variants.forEach(variant => {
                    const color = variant.color || "Unknown";
                    const size = variant.size || "Unknown";
                    const stock = variant.stock || 0; // L·∫•y s·ªë l∆∞·ª£ng ƒë√∫ng c·ªßa bi·∫øn th·ªÉ

                    const existingVariant = acc[key].variants.find(v => v.color === color && v.size === size);

                    if (existingVariant) {
                        existingVariant.stock += stock; // C·ªông s·ªë l∆∞·ª£ng v√†o bi·∫øn th·ªÉ ƒë√£ c√≥
                    } else {
                        acc[key].variants.push({
                            color: color,
                            size: size,
                            stock: stock
                        });
                    }
                });

                return acc;
            }, {})
        );

        console.log("üì¶ Grouped Cart Items:", JSON.stringify(groupedCartItems, null, 2));




        // T·∫°o ƒë∆°n h√†ng m·ªõi
        const newOrder = new Order({
            receiver,
            cartItems: groupedCartItems,
            discount: discount,
            totalAmount: totalAmount,
            idHoaDon: newInvoiceNumber,
            shippingAddress
        });

        await newOrder.save();

        // C·∫≠p nh·∫≠t t·ªìn kho sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng

        for (const item of cartItems) {
            const product = await Product.findById(item._id);
            if (product) {
                for (const selectedVariant of item.variants) {
                    console.log("üü¢ Variant nh·∫≠n ƒë∆∞·ª£c t·ª´ cart:", selectedVariant); // Debug

                    const variantIndex = product.variants.findIndex(v =>
                        String(v.color).trim().toLowerCase() === String(selectedVariant.color).trim().toLowerCase() &&
                        String(v.size).trim() === String(selectedVariant.size).trim()
                    );

                    if (variantIndex !== -1) {
                        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
                        let currentStock = Number(product.variants[variantIndex].stock) || 0;
                        let quantityToDeduct = isNaN(Number(selectedVariant.stock)) ? 0 : Number(selectedVariant.stock);

                        console.log(`üîπ Stock hi·ªán t·∫°i: ${currentStock}, S·ªë l∆∞·ª£ng tr·ª´: ${quantityToDeduct}`);

                        if (quantityToDeduct > 0) {
                            product.variants[variantIndex].stock = Math.max(0, currentStock - quantityToDeduct);
                            console.log(`‚úÖ C·∫≠p nh·∫≠t t·ªìn kho: ${item.name} (M√†u: ${selectedVariant.color}, Size: ${selectedVariant.size}) c√≤n l·∫°i: ${product.variants[variantIndex].stock}`);
                        } else {
                            console.log(`‚ö† L·ªói: quantityToDeduct kh√¥ng h·ª£p l·ªá (${selectedVariant.quantity})`);
                        }
                    } else {
                        console.log(`‚ö† Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ: ${item.name} (M√†u: ${selectedVariant.color}, Size: ${selectedVariant.size})`);
                    }
                }
                await product.save();
            }
        }

        res.status(201).json({ message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", order: newOrder });


    } catch (error) {
        console.error("‚ùå L·ªói ƒë·∫∑t h√†ng:", error);
        res.status(500).json({ message: "L·ªói server!", error });
    }
});



// API l·∫•y ƒë∆°n h√†ng theo receiver (userId t·ª´ LocalStorage)
router.get("/orders/user/:userId", async (req, res) => {
    try {
        const { userId } = req.params;
        console.log("userId nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", userId);

        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!" });
        }

        const orders = await Order.find({ receiver: userId });

        if (!orders.length) {
            return res.status(404).json({ message: "Ng∆∞·ªùi d√πng ch∆∞a c√≥ ƒë∆°n h√†ng n√†o!" });
        }

        res.status(200).json({ message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!", orders });
    } catch (error) {
        console.error("L·ªói l·∫•y ƒë∆°n h√†ng theo receiver:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
});


//Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
router.get("/orders/:orderId", async (req, res) => {
    try {
        const { orderId } = req.params;

        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).json({ message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!" });
        }

        const order = await Order.findById(orderId);
        if (!order) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        }

        res.status(200).json(order); // Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin ƒë∆°n h√†ng
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
});


//API h·ªßy ƒë∆°n h√†ng

router.put("/orders/:orderId/cancel", async (req, res) => {
    try {
        const { orderId } = req.params;
        const { lyDoHuy, ngayHuy } = req.body; // L·∫•y d·ªØ li·ªáu t·ª´ request

        // console.log("orderId nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", orderId);
        // console.log("L√Ω do h·ªßy nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", lyDoHuy);
        // console.log("Ng√†y h·ªßy nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", ngayHuy);

        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).json({ message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!" });
        }

        const order = await Order.findById(orderId);
        if (!order) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        }

        if (order.status !== "Ch·ªù x√°c nh·∫≠n") {
            return res.status(400).json({ message: "Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng khi tr·∫°ng th√°i l√† 'Ch·ªù x√°c nh·∫≠n'!" });
        }

        order.status = "ƒê√£ h·ªßy";
        order.lyDoHuy = lyDoHuy;
        order.ngayHuy = ngayHuy || new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });

        // Danh s√°ch promise ƒë·ªÉ c·∫≠p nh·∫≠t t·ªìn kho
        for (const item of order.cartItems) {
            console.log("Danh s√°ch s·∫£n ph·∫©m:", order.cartItems);
            const product = await Product.findOne({ _id: item._id });
            if (product) {
                // Duy·ªát qua t·∫•t c·∫£ bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m trong gi·ªè h√†ng
                for (let i = 0; i < item.variants.length; i++) {
                    const itemVariant = item.variants[i];

                    product.variants.forEach((variant) => {
                        if (variant.size === itemVariant.size && variant.color === itemVariant.color) {
                            variant.stock += itemVariant.stock; // C·ªông l·∫°i s·ªë l∆∞·ª£ng ƒë√£ mua v√†o kho
                        }
                    });
                }

                await product.save(); // L∆∞u l·∫°i th√¥ng tin s·∫£n ph·∫©m
            }
        }
        order.save(); // L∆∞u l·∫°i th√¥ng tin ƒë∆°n h√†ng

        res.status(200).json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy v√† t·ªìn kho ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", order });

    } catch (error) {
        console.error("‚ùå L·ªói khi h·ªßy ƒë∆°n h√†ng:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
});

//S·ª≠a ƒë·ªãa ch·ªâ ƒë∆°n h√†ng theo OrderId khi ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
router.put("/orders/:orderId/shipping-address", async (req, res) => {
    try {
        const { orderId } = req.params;
        const { fullName, phone, address } = req.body;
        // console.log("orderId nh·∫≠n ƒë∆∞·ª£c t·ª´ ƒë∆°n h√†ng:", orderId);
        // console.log("Th√¥ng tin ƒë·ªãa ch·ªâ nh·∫≠n ƒë∆∞·ª£c t·ª´ ƒë∆°n h√†ng:", fullName, phone, address);

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng c·ªßa orderId
        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).json({ message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!" });
        }

        // Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
        if (!fullName || !phone || !address || !address.street || !address.city || !address.district || !address.ward) {
            return res.status(400).json({ message: "Th√¥ng tin ƒë·ªãa ch·ªâ giao h√†ng kh√¥ng ƒë·∫ßy ƒë·ªß!" });
        }

        // C·∫≠p nh·∫≠t ƒë∆°n h√†ng theo orderId
        const updatedOrder = await Order.findByIdAndUpdate(
            orderId,
            { $set: { shippingAddress: { fullName, phone, address } } },
            { new: true } // Tr·∫£ v·ªÅ d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
        );

        if (!updatedOrder) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t!" });
        }

        res.status(200).json({ message: "C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng th√†nh c√¥ng!", updatedOrder });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
});

router.put("/orders/payment", async (req, res) => {
    try {
        const { orderId, statusPayment, paymentMethod } = req.query;

        console.log("orderId nh·∫≠n ƒë∆∞·ª£c t·ª´ params:", orderId);
        console.log("Tr·∫°ng th√°i thanh to√°n:", statusPayment);

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ID h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).json({ message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!" });
        }

        // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
        const updatedOrder = await Order.findByIdAndUpdate(
            orderId,
            {
                $set: {
                    statusPayment,
                    paymentMethod,
                },
            }
        );

        if (!updatedOrder) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        }

        return res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng!", updatedOrder });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n:", error.message);
        return res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
});

// ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√≥ t·ªáp font ƒë√∫ng trong d·ª± √°n
const RobotoRegularFont = fs.readFileSync(path.join(__dirname, "fonts/Roboto-Regular.ttf"), "base64");
const RobotoBoldFont = fs.readFileSync(path.join(__dirname, "fonts/Roboto-Bold.ttf"), "base64");


const generateInvoice = (orderDetails) => {
    console.log("Th√¥ng tin ƒë∆°n h√†ng:", orderDetails);

    return new Promise((resolve, reject) => {
        try {
            const doc = new jsPDF();

            // ƒêƒÉng k√Ω font Roboto
            doc.addFileToVFS("Roboto-Regular.ttf", RobotoRegularFont);
            doc.addFileToVFS("Roboto-Bold.ttf", RobotoBoldFont);
            doc.addFont("Roboto-Regular.ttf", "Roboto", "normal");
            doc.addFont("Roboto-Bold.ttf", "Roboto", "bold");
            doc.setFont("Roboto");

            let y = 10;

            // Ti√™u ƒë·ªÅ c·ª≠a h√†ng
            doc.setFontSize(20);
            doc.setFont("Roboto", "bold");
            doc.text("C·ª¨A H√ÄNG GI√ÄY D√âP HDND", 105, y, { align: "center" });
            y += 8;

            doc.setFontSize(12);
            doc.setFont("Roboto", "normal");
            doc.text("ƒê·ªãa ch·ªâ: 12 Nguy·ªÖn VƒÉn B·∫£o, Qu·∫≠n G√≤ V·∫•p, TP.HCM", 105, y, { align: "center" });
            y += 6;
            doc.text("SƒêT: 0123 456 789 | Email: hdndshop@gmail.com", 105, y, { align: "center" });
            y += 6;
            doc.text("----------------------------------------------------------------------------------------------------------------------------------", 105, y, { align: "center" });
            y += 10;

            // Ti√™u ƒë·ªÅ h√≥a ƒë∆°n
            doc.setFontSize(18);
            doc.setFont("Roboto", "bold");
            doc.text(`ƒê∆†N H√ÄNG #${orderDetails.order.idHoaDon}`, 105, y, { align: "center" });
            y += 10;

            // Ng√†y l·∫≠p
            const orderDate = orderDetails.order.orderDate || new Date(); // n·∫øu kh√¥ng c√≥ th√¨ l·∫•y ng√†y hi·ªán t·∫°i
            doc.setFontSize(12);
            doc.setFont("Roboto", "normal");
            doc.text(`Ng√†y l·∫≠p: ${new Date(orderDate).toLocaleDateString('vi-VN')}`, 20, y);
            y += 10;

            const shippingAddress = orderDetails.order.shippingAddress;
            doc.setFontSize(12);
            doc.text(`T√™n ng∆∞·ªùi nh·∫≠n: ${shippingAddress.fullName}`, 20, y);
            y += 8;
            doc.text(`S·ªë ƒëi·ªán tho·∫°i: ${shippingAddress.phone}`, 20, y);
            y += 8;
            doc.text(`ƒê·ªãa ch·ªâ: ${shippingAddress.address.street}, ${shippingAddress.address.district}, ${shippingAddress.address.city}`, 20, y);
            y += 10;

            // B·∫£ng s·∫£n ph·∫©m
            const tableColumns = ["S·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "Size", "M√†u s·∫Øc", "ƒê∆°n gi√° (VND)", "Th√†nh ti·ªÅn (VND)"];
            const tableRows = [];

            orderDetails.order.cartItems.forEach((item) => {
                item.variants.forEach((variant) => {
                    tableRows.push([
                        item.name,
                        variant.stock,
                        variant.size || "Kh√¥ng c√≥",
                        variant.color || "Kh√¥ng c√≥",
                        `${item.price.toLocaleString()}ƒë`,
                        `${(item.price * variant.stock).toLocaleString()}ƒë`,
                    ]);
                });
            });

            autoTable(doc, {
                startY: y,
                head: [tableColumns],
                body: tableRows,
                theme: "striped",
                styles: {
                    font: "Roboto",
                    fontSize: 10,
                    cellPadding: 3,
                    textColor: [33, 33, 33],
                    lineColor: [221, 221, 221],
                    lineWidth: 0.1,
                },
                headStyles: {
                    fillColor: [52, 152, 219],
                    textColor: [255, 255, 255],
                    fontStyle: "bold",
                    halign: 'center'
                },
                bodyStyles: {
                    fillColor: [245, 245, 245],
                    textColor: [50, 50, 50],
                },
                columnStyles: {
                    1: { halign: 'center' },
                    2: { halign: 'center' },
                    3: { halign: 'center' },
                    4: { halign: 'right' },
                    5: { halign: 'right' },
                },
                didParseCell: (data) => {
                    data.cell.styles.font = "Roboto";
                }
            });

            const finalY = doc.lastAutoTable.finalY || y + 10;

            const totalAmount = orderDetails.order.totalAmount;
            const discount = orderDetails.order.discount || 0;
            const grandTotal = totalAmount - discount;

            doc.setFontSize(12);
            doc.text(`T·ªïng ti·ªÅn: ${totalAmount.toLocaleString()} VND`, 130, finalY + 10);
            doc.setFontSize(10);
            doc.text(`(ƒê√£ bao g·ªìm 20K ph√≠ v·∫≠n chuy·ªÉn)`, 130, finalY + 16); // D√≤ng nh·ªè b√™n d∆∞·ªõi
            doc.setFontSize(12);
            doc.text(`Gi·∫£m gi√°: ${discount.toLocaleString()} VND`, 130, finalY + 24);
            doc.text(`T·ªïng c·ªông: ${grandTotal.toLocaleString()} VND`, 130, finalY + 32);

            const invoiceDir = path.join(__dirname, 'invoices');

            if (!fs.existsSync(invoiceDir)) {
                fs.mkdirSync(invoiceDir, { recursive: true });
            }

            const fileName = `${orderDetails.order.idHoaDon}.pdf`;
            const filePath = path.join(invoiceDir, fileName);

            const pdfOutput = doc.output();
            fs.writeFileSync(filePath, pdfOutput);

            resolve({ pdfUrl: filePath });
        } catch (err) {
            reject(err);
        }
    });
};



// API t·∫°o h√≥a ƒë∆°n PDF
router.post("/generate-invoice", async (req, res) => {
    try {
        const { orderDetails } = req.body;
        const invoice = await generateInvoice(orderDetails);
        res.json(invoice); // Tr·∫£ v·ªÅ URL c·ªßa file PDF
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "L·ªói khi t·∫°o h√≥a ƒë∆°n PDF" });
    }
});

// C·∫•u h√¨nh g·ª≠i email v·ªõi nodemailer
const transporter = nodemailer.createTransport({
    service: 'gmail',  // V√≠ d·ª•: s·ª≠ d·ª•ng Gmail
    auth: {
        user: 'hdndstore.cs01@gmail.com',
        pass: 'ycum eapv cixa yyqg' // M·∫≠t kh·∫©u ·ª©ng d·ª•ng Gmail
    }
});

// G·ª≠i email v·ªõi file PDF ƒë√≠nh k√®m
const sendInvoiceEmail = (email, invoiceUrl) => {
    console.log(`G·ª≠i email ƒë·∫øn: ${email}`);

    return new Promise((resolve, reject) => {
        // T·∫°o ƒë·ªëi t∆∞·ª£ng mailOptions v·ªõi n·ªôi dung v√† c·∫•u h√¨nh email
        const mailOptions = {
            from: 'hdndstore.cs01@gmail.com',  // ƒê·ªãa ch·ªâ email ng∆∞·ªùi g·ª≠i
            to: email,  // ƒê·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n
            subject: 'H√≥a ƒê∆°n Mua H√†ng - HDND Store',  // Ti√™u ƒë·ªÅ email
            text: `
K√≠nh g·ª≠i qu√Ω kh√°ch,

C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng mua s·∫Øm t·∫°i HDND Store. D∆∞·ªõi ƒë√¢y l√† h√≥a ƒë∆°n chi ti·∫øt cho ƒë∆°n h√†ng c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra t·ªáp ƒë√≠nh k√®m.

N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, xin vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£ kh√°ch h√†ng.

Tr√¢n tr·ªçng,
HDND Store
            `,  // N·ªôi dung email b·∫±ng text
            html: `
<!DOCTYPE html>
<html>

<head>
    <title>H√≥a ƒê∆°n Mua H√†ng - HDND Store</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>

<body style="margin: 0; padding: 0; min-width: 100%; font-family: Arial, sans-serif; font-size: 16px; line-height: 1.5; background-color: #FAFAFA; color: #222222;">
    <div style="max-width: 650px; margin: 0 auto;">
        <!-- Header Section -->
        <div style="background-color: #ff6600; padding: 24px; color: #ffffff;">
            <h1 style="font-size: 24px; font-weight: 700; text-align: center;">
                H√≥a ƒê∆°n Mua H√†ng - HDND Store
            </h1>
        </div>
        
        <!-- Invoice Content Section -->
        <div style="padding: 24px; background-color: #ffffff;">
            <p>K√≠nh g·ª≠i qu√Ω kh√°ch,</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng mua s·∫Øm t·∫°i <strong>HDND Store</strong>. D∆∞·ªõi ƒë√¢y l√† h√≥a ƒë∆°n chi ti·∫øt cho ƒë∆°n h√†ng c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra t·ªáp ƒë√≠nh k√®m.</p>
            <p>N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, xin vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£ kh√°ch h√†ng.</p>
            <br/>
            <p>Tr√¢n tr·ªçng,<br/>HDND Store</p>
        </div>
        
        <!-- Footer Section -->
        <div style="background-color: #f6f6f6; padding: 24px; text-align: center;">
            <p>Li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu c·∫ßn h·ªó tr·ª£:</p>
            <p><a href="mailto:hdndstore.cs01@gmail.com" style="color: #ff6600; text-decoration: none;">hdndstore.cs01@gmail.com</a></p>
            <p>Ho·∫∑c truy c·∫≠p website: <a href="http://localhost:5173/home" style="color: #ff6600; text-decoration: none;">HDND Store</a></p>
        </div>
    </div>
</body>

</html>
            `,  // N·ªôi dung email b·∫±ng HTML
            attachments: [
                {
                    filename: path.basename(invoiceUrl),  // L·∫•y t√™n file t·ª´ URL
                    path: path.join(__dirname, 'invoices', path.basename(invoiceUrl)),  // ƒê∆∞·ªùng d·∫´n file tr√™n server
                    contentType: 'application/pdf'  // ƒê·ªãnh d·∫°ng t·ªáp ƒë√≠nh k√®m
                }
            ]
        };

        // G·ª≠i email
        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
                console.error("L·ªói khi g·ª≠i email:", error);
                reject(error);  // N·∫øu c√≥ l·ªói th√¨ tr·∫£ v·ªÅ l·ªói
            } else {
                console.log('Email g·ª≠i th√†nh c√¥ng:', info.response);
                resolve(info);  // N·∫øu g·ª≠i th√†nh c√¥ng, tr·∫£ v·ªÅ th√¥ng tin email
            }
        });
    });
};


// API g·ª≠i email h√≥a ƒë∆°n
router.post("/send-invoice-email", async (req, res) => {
    try {
        const { email, invoiceUrl } = req.body;
        await sendInvoiceEmail(email, invoiceUrl);
        res.json({ message: "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng" });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "L·ªói khi g·ª≠i email" });
    }
});


module.exports = router;
